.\" Automatically generated by Pandoc 2.7.3
.\"
.TH "stpl" "1" "" "Version 1.13.2" "stpl"
.hy
.SH NAME
.PP
\f[B]stpl\f[R] \[em] simple template - Bottle SimpleTemplate in a
separate command line tool.
.SH SYNOPSIS
.PP
\f[B]stpl\f[R] <file>|<string>|- [<directory>|-] [<python variable>]*
[-I <include folder>]*
.SH DESCRIPTION
.PP
\f[B]stpl\f[R] is a little command line tool, that
.IP \[bu] 2
takes a bottle (https://bottlepy.org/docs/dev/stpl.html) SimpleTemplate
file with extension \f[B].stpl\f[R] and
.IP \[bu] 2
expands the template to \f[B]stdout\f[R] or
.IP \[bu] 2
to a directory, thereby dropping the \f[B].stpl\f[R]
.PP
Parameters:
.IP "1)" 3
file or string or -
.IP "2)" 3
optional: directory or -
.IP "3)" 3
optionally several: python code defining variables.
Enclose with \[aq]\[aq].
.IP "4)" 3
optionally several: -I <include folder>
.PP
Usage from Python:
.IP
.nf
\f[C]
>>> from stpl import SimpleTemplate
>>> tpl = SimpleTemplate(\[aq]Hello {{name}}!\[aq])
>>> tpl.render(name=\[aq]World\[aq])
u\[aq]Hello World!\[aq]
\f[R]
.fi
.PP
or
.IP
.nf
\f[C]
>>> from bottle import template
>>> template(\[aq]Hello {{name}}!\[aq], name=\[aq]World\[aq])
u\[aq]Hello World!\[aq]
\f[R]
.fi
.PP
or
.IP
.nf
\f[C]
>>> from bottle import template
>>> my_dict={\[aq]number\[aq]: \[aq]123\[aq], \[aq]street\[aq]: \[aq]Fake St.\[aq], \[aq]city\[aq]: \[aq]Fakeville\[aq]}
>>> template(\[aq]I live at {{number}} {{street}}, {{city}}\[aq], **my_dict)
u\[aq]I live at 123 Fake St., Fakeville\[aq]
\f[R]
.fi
.SH SIMPLETEMPLATE
.SS Inline Expressions
.PP
\f[C]{{...}}\f[R]: any python expression is allowed within the curly
brackets as long as it evaluates to a string or something that has a
string representation:
.IP
.nf
\f[C]
>>> template(\[aq]Hello {{name}}!\[aq], name=\[aq]World\[aq])
u\[aq]Hello World!\[aq]
>>> template(\[aq]Hello {{name.title() if name else \[dq]stranger\[dq]}}!\[aq], name=None)
u\[aq]Hello stranger!\[aq]
>>> template(\[aq]Hello {{name.title() if name else \[dq]stranger\[dq]}}!\[aq], name=\[aq]mArC\[aq])
u\[aq]Hello Marc!\[aq]
\f[R]
.fi
.PP
You can start the expression with an exclamation mark to disable
escaping:
.IP
.nf
\f[C]
\&.. code:: python
\f[R]
.fi
.RS
.PP
>>> template(\[aq]Hello {{name}}!\[aq], name=\[aq]<b>World</b>\[aq])
u\[aq]Hello &lt;b&gt;World&lt;/b&gt;!\[aq] >>> template(\[aq]Hello
{{!name}}!\[aq], name=\[aq]<b>World</b>\[aq]) u\[aq]Hello
<b>World</b>!\[aq]
.RE
.SS Embedded python code
.PP
Code lines start with \f[C]%\f[R] and code blocks are surrounded by
\f[C]<%\f[R] and \f[C]%>\f[R] tokens:
.IP
.nf
\f[C]
% name = \[dq]Bob\[dq]  # a line of python code
<p>Some plain text in between</p>
<%
  # A block of python code
  name = name.title().strip()
%>
<p>More plain text</p>
\f[R]
.fi
.PP
Embedded python code follows regular python syntax, but with two
additional syntax rules:
.IP \[bu] 2
\f[B]Indentation is ignored.\f[R] You can put as much whitespace in
front of statements as you want.
This allows you to align your code with the surrounding markup and can
greatly improve readability.
.IP \[bu] 2
Blocks that are normally indented have to be closed explicitly with an
\f[C]end\f[R] keyword.
.IP
.nf
\f[C]
<ul>
  % for item in basket:
    <li>{{item}}</li>
  % end
</ul>
\f[R]
.fi
.PP
Both the \f[C]%\f[R] and the \f[C]<%\f[R] tokens are only recognized if
they are the first non-whitespace characters in a line.
You don\[aq]t have to escape them if they appear mid-text in your
template markup.
Only if a line of text starts with one of these tokens, you have to
escape it with a backslash.
In the rare case where the backslash + token combination appears in your
markup at the beginning of a line, you can always help yourself with a
string literal in an inline expression:
.IP
.nf
\f[C]
This line contains % and <% but no python code.
\[rs]% This text-line starts with the \[aq]%\[aq] token.
\[rs]<% Another line that starts with a token but is rendered as text.
{{\[aq]\[rs]\[rs]%\[aq]}} this line starts with an escaped token.
\f[R]
.fi
.SS Whitespace Control
.PP
Code blocks and code lines always span the whole line.
Whitespace in front of after a code segment is stripped away.
You won\[aq]t see empty lines or dangling whitespace in your template
because of embedded code:
.IP
.nf
\f[C]
<div>
 % if True:
  <span>content</span>
 % end
</div>
\f[R]
.fi
.PP
This snippet renders to clean and compact html:
.IP
.nf
\f[C]
<div>
  <span>content</span>
</div>
\f[R]
.fi
.PP
But embedding code still requires you to start a new line, which may not
what you want to see in your rendered template.
To skip the newline in front of a code segment, end the text line with a
double-backslash:
.IP
.nf
\f[C]
<div>\[rs]\[rs]
 %if True:
<span>content</span>\[rs]\[rs]
 %end
</div>
\f[R]
.fi
.PP
This time the rendered template looks like this:
.IP
.nf
\f[C]
<div><span>content</span></div>
\f[R]
.fi
.PP
This only works directly in front of code segments.
In all other places you can control the whitespace yourself and
don\[aq]t need any special syntax.
.SH Template Functions
.PP
Each template is preloaded with a bunch of functions that help with the
most common use cases.
These functions are always available.
You don\[aq]t have to import or provide them yourself.
For everything not covered here there are probably good python libraries
available.
Remember that you can \f[C]import\f[R] anything you want within your
templates.
They are python programs after all.
.PP
\f[I]include(sub_template, **variables)\f[R]
.RS
.PP
Render a sub-template with the specified variables and insert the
resulting text into the current template.
The function returns a dictionary containing the local variables passed
to or defined within the sub-template:
.IP
.nf
\f[C]
% include(\[aq]header.tpl\[aq], title=\[aq]Page Title\[aq])
Page Content
% include(\[aq]footer.tpl\[aq])
\f[R]
.fi
.RE
.PP
\f[I]rebase(name, **variables)\f[R]
.RS
.PP
Mark the current template to be later included into a different
template.
After the current template is rendered, its resulting text is stored in
a variable named \f[C]base\f[R] and passed to the base-template, which
is then rendered.
This can be used to \f[C]wrap\f[R] a template with surrounding text, or
simulate the inheritance feature found in other template engines:
.IP
.nf
\f[C]
% rebase(\[aq]base.tpl\[aq], title=\[aq]Page Title\[aq])
<p>Page Content ...</p>
\f[R]
.fi
.PP
This can be combined with the following \f[C]base.tpl\f[R]:
.IP
.nf
\f[C]
<html>
<head>
  <title>{{title or \[aq]No title\[aq]}}</title>
</head>
<body>
  {{!base}}
</body>
</html>
\f[R]
.fi
.PP
Accessing undefined variables in a template raises \f[C]NameError\f[R]
and stops rendering immediately.
This is standard python behavior and nothing new, but vanilla python
lacks an easy way to check the availability of a variable.
This quickly gets annoying if you want to support flexible inputs or use
the same template in different situations.
These functions may help:
.RE
.PP
\f[I]defined(name)\f[R]
.RS
.PP
Return True if the variable is defined in the current template
namespace, False otherwise.
.RE
.PP
\f[I]get(name, default=None)\f[R]
.RS
.PP
Return the variable, or a default value.
.RE
.PP
\f[I]setdefault(name, default)\f[R]
.RS
.PP
If the variable is not defined, create it with the given default value.
Return the variable.
.PP
Here is an example that uses all three functions to implement optional
template variables in different ways:
.IP
.nf
\f[C]
% setdefault(\[aq]text\[aq], \[aq]No Text\[aq])
<h1>{{get(\[aq]title\[aq], \[aq]No Title\[aq])}}</h1>
<p> {{ text }} </p>
% if defined(\[aq]author\[aq]):
  <p>By {{ author }}</p>
% end
\f[R]
.fi
.RE
.SH EXAMPLES
.PP
Example file:
.RS
.PP
NAME=\[dq]{{!full_name}}\[dq] EMAIL=\[dq]{{!default_email}}\[dq]
REPO=\[dq]{{!repo}}\[dq]
.RE
.PP
To stdout:
.IP
.nf
\f[C]
stpl file.txt.stpl - \[aq]full_name=\[dq]Roland Puntaier\[dq]\[aq] \[aq]default_email=\[dq]roland.puntaier\[at]gmail.com\[dq]\[aq] \[aq]repo=\[dq]https://github.com/rpuntaie/stpl\[dq]\[aq]
\f[R]
.fi
.PP
To file.txt:
.IP
.nf
\f[C]
stpl file.txt.stpl . \[aq]full_name=\[dq]Roland Puntaier\[dq]\[aq] \[aq]default_email=\[dq]roland.puntaier\[rs]\[at]gmail.com\[dq]\[aq] \[aq]repo=\[dq]https://github.com/rpuntaie/stpl\[dq]\[aq]
\f[R]
.fi
